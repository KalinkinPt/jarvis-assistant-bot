import os
import json
import logging
from datetime import datetime, timedelta
import pytz
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, JobQueue
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

def load_tasks():
    try:
        with open('tasks.json', 'r') as f:
            return json.load(f)
    except:
        return []

def save_tasks(tasks):
    with open('tasks.json', 'w') as f:
        json.dump(tasks, f)

def schedule_task(task, application):
    tz = pytz.timezone("Europe/Tallinn")
    run_time = tz.localize(datetime.fromisoformat(task["time"]))  # üõ† –∏—Å–ø—Ä–∞–≤–∏–ª–∏ —Ç—É—Ç
    delay = (run_time - datetime.now(tz)).total_seconds()

    if delay > 0:
        print(f"‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ {int(delay)} —Å–µ–∫: {task['text']}")
        application.job_queue.run_once(
            lambda context: context.bot.send_message(chat_id=task["chat_id"], text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task['text']}"),
            when=delay
        )

def schedule_repeating_task(task, application):
    from datetime import time

    hour, minute = map(int, task["time"].split(":"))
    message = task["text"]
    days = task["repeat"]  # ["Monday", "Tuesday", ...]

    day_indexes = {
        "Monday": 0, "Tuesday": 1, "Wednesday": 2,
        "Thursday": 3, "Friday": 4, "Saturday": 5, "Sunday": 6
    }

    application.job_queue.run_daily(
        lambda context: context.bot.send_message(chat_id=task["chat_id"], text=f"üîÅ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}"),
        time=time(hour, minute),
        days=[day_indexes[day] for day in days]
    )

async def parse_with_gpt(text):
    tz = pytz.timezone("Europe/Tallinn")
    now = datetime.now(tz)
    today = now.strftime("%Y-%m-%d")
    current_time = now.strftime("%H:%M")

    prompt = f"""
–°–µ–≥–æ–¥–Ω—è: {today}
–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}

–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –∏ –¥–∞—Ç—É –∏–∑ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π —Ñ—Ä–∞–∑—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∞ —Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è ‚Äî –≤–µ—Ä–Ω–∏:
{{
  "text": "—á—Ç–æ —Å–¥–µ–ª–∞—Ç—å",
  "time": "2025-05-15T18:00:00"
}}

–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è ‚Äî –≤–µ—Ä–Ω–∏:
{{
  "text": "—á—Ç–æ –¥–µ–ª–∞—Ç—å",
  "time": "08:00",  // —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã!
  "repeat": ["Monday", "Tuesday", "Wednesday"]
}}

‚ùó –í–ê–ñ–ù–û:
‚Äî –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç "–∫–∞–∂–¥—ã–π", "–ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º", "–ø–æ –±—É–¥–Ω—è–º", "–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º", "–∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ", "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "–≤ 8 —É—Ç—Ä–∞ –ø–æ –±—É–¥–Ω—è–º" ‚Äî —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞  
‚Äî –∏—Å–ø–æ–ª—å–∑—É–π repeat —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö  
‚Äî –Ω–µ –ø–∏—à–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON

–§—Ä–∞–∑–∞: {text}
–û—Ç–≤–µ—Ç:
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2
        )
        content = response.choices[0].message["content"].strip()
        print("üì• GPT –≤–µ—Ä–Ω—É–ª:\\n", content)

        if content.startswith("```"):
            content = content.split("```")[-1].strip()

        return json.loads(content)

    except Exception as e:
        print("‚ùå GPT –æ—à–∏–±–∫–∞:", e)
        return None


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    gpt_result = await parse_with_gpt(user_input)

    if not gpt_result or not gpt_result.get("time"):
        await update.message.reply_text("ü§ñ –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ.")
        return

    # –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ repeat –µ—Å—Ç—å
    if "repeat" in gpt_result:
        task = {
            "chat_id": update.effective_chat.id,
            "text": gpt_result["text"],
            "time": gpt_result["time"],  # —Ñ–æ—Ä–º–∞—Ç: "08:00"
            "repeat": gpt_result["repeat"]
        }
        schedule_repeating_task(task, context.application)
        await update.message.reply_text(f"üîÅ –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å: '{task['text']}' –≤ {task['time']} –ø–æ –¥–Ω—è–º: {', '.join(task['repeat'])}")
        return

    # –µ—Å–ª–∏ time ‚Äî —Å–ø–∏—Å–æ–∫ (–º–Ω–æ–≥–æ –¥–∞—Ç)
    if isinstance(gpt_result["time"], list):
        for t in gpt_result["time"]:
            task = {
                "chat_id": update.effective_chat.id,
                "text": gpt_result["text"],
                "time": t
            }
            schedule_task(task, context.application)
        await update.message.reply_text(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(gpt_result['time'])}")
        return

    # –æ–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞
    task = {
        "chat_id": update.effective_chat.id,
        "text": gpt_result["text"],
        "time": gpt_result["time"]
    }
    schedule_task(task, context.application)

    time_str = datetime.fromisoformat(task["time"]).strftime('%Y-%m-%d %H:%M')
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª! –ù–∞–ø–æ–º–Ω—é: ‚Äò{task['text']}‚Äô –≤ {time_str}")

async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = load_tasks()
    chat_id = update.effective_chat.id
    user_tasks = [task for task in tasks if task["chat_id"] == chat_id]

    if not user_tasks:
        await update.message.reply_text("üîï –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    text = "üóì –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n"
    for i, task in enumerate(user_tasks):
        if "repeat" in task:
            text += f"{i + 1}. üîÅ {task['text']} ‚Äî –≤ {task['time']} –ø–æ {', '.join(task['repeat'])}\n"
        else:
            t = datetime.fromisoformat(task["time"]).strftime('%Y-%m-%d %H:%M')
            text += f"{i + 1}. ‚è∞ {task['text']} ‚Äî {t}\n"

    await update.message.reply_text(text)

async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = load_tasks()
    chat_id = update.effective_chat.id
    user_tasks = [task for task in tasks if task["chat_id"] == chat_id]

    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /delete [–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏]")
        return

    try:
        index = int(context.args[0]) - 1
        if index < 0 or index >= len(user_tasks):
            raise ValueError()

        task_to_delete = user_tasks[index]
        tasks.remove(task_to_delete)
        save_tasks(tasks)

        await update.message.reply_text(f"üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {task_to_delete['text']}")

    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ—Å–º–æ—Ç—Ä–∏ /tasks")



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ: ¬´–Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 –∫—É–ø–∏—Ç—å —Ö–ª–µ–±¬ª ‚Äî –∏ —è –∑–∞–ø–æ–º–Ω—é üòâ")

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    job_queue = app.job_queue  # ‚úÖ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ –Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–∞

    app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("tasks", show_tasks))
app.add_handler(CommandHandler("delete", delete_task))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    tasks = load_tasks()
    for task in tasks:
        if datetime.fromisoformat(task["time"]) > datetime.now(pytz.timezone("Europe/Tallinn")):
            schedule_task(task, app)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

