import os
import json
import logging
from datetime import datetime, timedelta, time
import pytz
import openai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, JobQueue, CallbackQueryHandler

from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

def load_tasks():
    try:
        with open('tasks.json', 'r') as f:
            return json.load(f)
    except:
        return []

def save_tasks(tasks):
    with open('tasks.json', 'w') as f:
        json.dump(tasks, f)

def schedule_task(task, application):
    tz = pytz.timezone("Europe/Tallinn")
    run_time = tz.localize(datetime.fromisoformat(task["time"]))

    def make_job(delay_seconds, prefix):
        if delay_seconds > 0:
            application.job_queue.run_once(
                lambda context: context.bot.send_message(
                    chat_id=task["chat_id"],
                    text=f"{prefix} {task['text']}"
                ),
                when=delay_seconds
            )

    now = datetime.now(tz)
    delay_main = (run_time - now).total_seconds()
    delay_30 = delay_main - 1800  # 30 –º–∏–Ω—É—Ç –¥–æ
    delay_15 = delay_main - 900   # 15 –º–∏–Ω—É—Ç –¥–æ

    print(f"‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É: {task['text']} –Ω–∞ {run_time}")
    make_job(delay_30, "‚ö†Ô∏è –ß–µ—Ä–µ–∑ 30 –º–∏–Ω:")
    make_job(delay_15, "‚è± –ü–æ—á—Ç–∏ –≤—Ä–µ–º—è:")
    make_job(delay_main, "üîî –°–µ–π—á–∞—Å:")


def schedule_repeating_task(task, application):
    from datetime import datetime, timedelta, time

    hour, minute = map(int, task["time"].split(":"))
    message = task["text"]
    days = task["repeat"]  # ["Monday", "Tuesday", ...]

    day_indexes = {
        "Monday": 0, "Tuesday": 1, "Wednesday": 2,
        "Thursday": 3, "Friday": 4, "Saturday": 5, "Sunday": 6
    }

    target_time = time(hour, minute)

    # –í—Ä–µ–º—è "–∑–∞ 30 –º–∏–Ω—É—Ç"
    time_30_before = (datetime.combine(datetime.today(), target_time) - timedelta(minutes=30)).time()
    # –í—Ä–µ–º—è "–∑–∞ 15 –º–∏–Ω—É—Ç"
    time_15_before = (datetime.combine(datetime.today(), target_time) - timedelta(minutes=15)).time()

    day_list = [day_indexes[d] for d in days]

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 30 –º–∏–Ω
    application.job_queue.run_daily(
        lambda context: context.bot.send_message(
            chat_id=task["chat_id"],
            text=f"‚ö†Ô∏è –ß–µ—Ä–µ–∑ 30 –º–∏–Ω: {message}"
        ),
        time=time_30_before,
        days=day_list
    )

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 15 –º–∏–Ω
    application.job_queue.run_daily(
        lambda context: context.bot.send_message(
            chat_id=task["chat_id"],
            text=f"‚è± –ü–æ—á—Ç–∏ –≤—Ä–µ–º—è: {message}"
        ),
        time=time_15_before,
        days=day_list
    )

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
    application.job_queue.run_daily(
        lambda context: context.bot.send_message(
            chat_id=task["chat_id"],
            text=f"üîî –°–µ–π—á–∞—Å: {message}"
        ),
        time=target_time,
        days=day_list
    )

async def parse_with_gpt(text):
    tz = pytz.timezone("Europe/Tallinn")
    now = datetime.now(tz)
    today = now.strftime("%Y-%m-%d")
    current_time = now.strftime("%H:%M")

    prompt = f"""
–°–µ–≥–æ–¥–Ω—è: {today}
–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}

–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –∏ –¥–∞—Ç—É –∏–∑ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π —Ñ—Ä–∞–∑—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∞ —Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è ‚Äî –≤–µ—Ä–Ω–∏:
{{
  "text": "—á—Ç–æ —Å–¥–µ–ª–∞—Ç—å",
  "time": "2025-05-15T18:00:00"
}}

–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è ‚Äî –≤–µ—Ä–Ω–∏:
{{
  "text": "—á—Ç–æ –¥–µ–ª–∞—Ç—å",
  "time": "08:00",  // —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã!
  "repeat": ["Monday", "Tuesday", "Wednesday"]
}}

‚ùó –í–ê–ñ–ù–û:
‚Äî –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç "–∫–∞–∂–¥—ã–π", "–ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º", "–ø–æ –±—É–¥–Ω—è–º", "–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º", "–∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ", "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "–≤ 8 —É—Ç—Ä–∞ –ø–æ –±—É–¥–Ω—è–º" ‚Äî —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞  
‚Äî –∏—Å–ø–æ–ª—å–∑—É–π repeat —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö  
‚Äî –Ω–µ –ø–∏—à–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON

–§—Ä–∞–∑–∞: {text}
–û—Ç–≤–µ—Ç:
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2
        )
        content = response.choices[0].message["content"].strip()
        print("üì• GPT –≤–µ—Ä–Ω—É–ª:\\n", content)

        if content.startswith("```"):
            content = content.split("```")[-1].strip()

        return json.loads(content)

    except Exception as e:
        print("‚ùå GPT –æ—à–∏–±–∫–∞:", e)
        return None


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.text is None:
        return

    user_input = update.message.text
    gpt_result = await parse_with_gpt(user_input)

    if not gpt_result:
        await update.message.reply_text("ü§ñ –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ.")
        return

    # ‚úÖ –ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ
    if isinstance(gpt_result, list):
        count = 0
        for entry in gpt_result:
            if "text" in entry and "time" in entry:
                task = {
                    "chat_id": update.effective_chat.id,
                    "text": entry["text"],
                    "time": entry["time"]
                }
                schedule_task(task, context.application)
                tasks = load_tasks()
                tasks.append(task)
                save_tasks(tasks)
                count += 1

        await update.message.reply_text(f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª {count} –∑–∞–¥–∞—á(–∏)")
        return

    # üîÅ –ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞
    if "repeat" in gpt_result:
        task = {
            "chat_id": update.effective_chat.id,
            "text": gpt_result["text"],
            "time": gpt_result["time"],  # —Ñ–æ—Ä–º–∞—Ç: "08:00"
            "repeat": gpt_result["repeat"]
        }
        schedule_repeating_task(task, context.application)

        tasks = load_tasks()
        tasks.append(task)
        save_tasks(tasks)

        await update.message.reply_text(
            f"üîÅ –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å: '{task['text']}' –≤ {task['time']} –ø–æ –¥–Ω—è–º: {', '.join(task['repeat'])}"
        )
        return

    # üìÖ –ù–µ—Å–∫–æ–ª—å–∫–æ –¥–∞—Ç –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
    if isinstance(gpt_result.get("time"), list):
        for t in gpt_result["time"]:
            task = {
                "chat_id": update.effective_chat.id,
                "text": gpt_result["text"],
                "time": t
            }
            schedule_task(task, context.application)
            tasks = load_tasks()
            tasks.append(task)
            save_tasks(tasks)

        await update.message.reply_text(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(gpt_result['time'])}")
        return

    # üïê –û–±—ã—á–Ω–∞—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∑–∞–¥–∞—á–∞
    if not gpt_result.get("time"):
        await update.message.reply_text("ü§ñ –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ.")
        return

    task = {
        "chat_id": update.effective_chat.id,
        "text": gpt_result["text"],
        "time": gpt_result["time"]
    }
    schedule_task(task, context.application)

    tasks = load_tasks()
    tasks.append(task)
    save_tasks(tasks)

    time_str = datetime.fromisoformat(task["time"]).strftime('%Y-%m-%d %H:%M')
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª! –ù–∞–ø–æ–º–Ω—é: ‚Äò{task['text']}‚Äô –≤ {time_str}")


async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì• –í—ã–∑–≤–∞–Ω /tasks")
    tasks = load_tasks()
    chat_id = update.effective_chat.id
    user_tasks = [task for task in tasks if task["chat_id"] == chat_id]

    if not user_tasks:
        await update.message.reply_text("üîï –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    tz = pytz.timezone("Europe/Tallinn")
    now = datetime.now(tz)

    def format_timedelta(delta):
        days = delta.days
        seconds = delta.seconds
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60

        parts = []
        if days > 0:
            parts.append(f"{days} –¥–Ω")
        if hours > 0:
            parts.append(f"{hours} —á")
        if minutes > 0:
            parts.append(f"{minutes} –º–∏–Ω")

        return "—á–µ—Ä–µ–∑ " + " ".join(parts) if parts else "—Å–∫–æ—Ä–æ"

    text = "üóì –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n"
    for i, task in enumerate(user_tasks):
        if "repeat" in task:
            text += f"{i + 1}. üîÅ {task['text']} ‚Äî –≤ {task['time']} –ø–æ {', '.join(task['repeat'])}\n"
        else:
            t = datetime.fromisoformat(task["time"]).astimezone(tz)
            delta = t - now
            left = format_timedelta(delta) if delta.total_seconds() > 0 else "‚è± –£–∂–µ –ø—Ä–æ—à–ª–æ"
            t_str = t.strftime('%Y-%m-%d %H:%M')
            text += f"{i + 1}. ‚è∞ {task['text']} ‚Äî {t_str} ({left})\n"

    await update.message.reply_text(text)

async def show_tasks_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì• –í—ã–∑–≤–∞–Ω /tasks_today")
    tasks = load_tasks()
    chat_id = update.effective_chat.id
    user_tasks = [task for task in tasks if task["chat_id"] == chat_id]

    tz = pytz.timezone("Europe/Tallinn")
    now = datetime.now(tz)
    today_date = now.date()

    today_tasks = []

    for task in user_tasks:
        if "repeat" in task:
            continue  # –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è
        try:
            task_time = datetime.fromisoformat(task["time"]).astimezone(tz)
            if task_time.date() == today_date:
                today_tasks.append((task["text"], task_time))
        except:
            continue

    if not today_tasks:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á üí§")
        return

    def format_timedelta(delta):
        days = delta.days
        seconds = delta.seconds
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60

        parts = []
        if days > 0:
            parts.append(f"{days} –¥–Ω")
        if hours > 0:
            parts.append(f"{hours} —á")
        if minutes > 0:
            parts.append(f"{minutes} –º–∏–Ω")

        return "—á–µ—Ä–µ–∑ " + " ".join(parts) if parts else "—Å–∫–æ—Ä–æ"

    text = "üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    for i, (task_text, task_time) in enumerate(sorted(today_tasks, key=lambda x: x[1])):
        delta = task_time - now
        left = format_timedelta(delta) if delta.total_seconds() > 0 else "‚è± –£–∂–µ –ø—Ä–æ—à–ª–æ"
        t_str = task_time.strftime('%H:%M')
        text += f"{i + 1}. ‚è∞ {task_text} ‚Äî {t_str} ({left})\n"

    await update.message.reply_text(text)


async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = load_tasks()
    chat_id = update.effective_chat.id
    user_tasks = [task for task in tasks if task["chat_id"] == chat_id]

    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /delete [–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏]")
        return

    try:
        index = int(context.args[0]) - 1
        if index < 0 or index >= len(user_tasks):
            raise ValueError()

        task_to_delete = user_tasks[index]
        tasks.remove(task_to_delete)
        save_tasks(tasks)

        await update.message.reply_text(f"üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {task_to_delete['text']}")

    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ—Å–º–æ—Ç—Ä–∏ /tasks")

async def clear_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = load_tasks()
    chat_id = update.effective_chat.id

    tasks = [task for task in tasks if task["chat_id"] != chat_id]
    save_tasks(tasks)

    await update.message.reply_text("üßπ –í—Å–µ —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.")

async def clear_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_clear"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_clear"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚ùó –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏?", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id

    if query.data == "confirm_clear":
        tasks = load_tasks()
        tasks = [task for task in tasks if task["chat_id"] != chat_id]
        save_tasks(tasks)

        await query.message.delete()
        await query.message.reply_text("üßπ –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.")
    elif query.data == "cancel_clear":
        await query.message.delete()
        await query.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ: ¬´–Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 –∫—É–ø–∏—Ç—å —Ö–ª–µ–±¬ª ‚Äî –∏ —è –∑–∞–ø–æ–º–Ω—é üòâ")

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    job_queue = app.job_queue

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tasks", show_tasks))
    app.add_handler(CommandHandler("tasks_today", show_tasks_today))
    app.add_handler(CommandHandler("delete", delete_task))
    app.add_handler(CommandHandler("clear", clear_tasks))
    app.add_handler(CallbackQueryHandler(button_handler))  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫

    # —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º!
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    # –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    tasks = load_tasks()
    for task in tasks:
        if "repeat" in task:
            schedule_repeating_task(task, app)
        elif datetime.fromisoformat(task["time"]) > datetime.now(pytz.timezone("Europe/Tallinn")):
            schedule_task(task, app)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()


